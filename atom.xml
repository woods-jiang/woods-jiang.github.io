<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Woods Jiang]]></title>
  <subtitle><![CDATA[Talk less. Think more. Do more than more.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://woodsjiang.com/"/>
  <updated>2015-04-09T23:39:19.994Z</updated>
  <id>http://woodsjiang.com/</id>
  
  <author>
    <name><![CDATA[Woods Jiang]]></name>
    <email><![CDATA[woods.jiang.1@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[C++单例模式]]></title>
    <link href="http://woodsjiang.com/2015/04/09/C++%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://woodsjiang.com/2015/04/09/C++单例模式/</id>
    <published>2015-04-09T14:59:03.000Z</published>
    <updated>2015-04-09T23:39:19.994Z</updated>
    <content type="html"><![CDATA[<h1 id="单例模式定义">单例模式定义</h1><p>单例模式是设计模式的一种，即只能产生一个对象的类</p>
<h1 id="懒汉模式">懒汉模式</h1><p>所谓懒汉模式即第一次调用的时候才产生对象。这需要用锁才能够保证线程安全，但是如果处理大量数据时，性能不好。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CSingleton</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">static</span> CSingleton* getInstance()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (NULL == m_instance)</span><br><span class="line">		&#123;</span><br><span class="line">			Lock();</span><br><span class="line">			<span class="keyword">if</span> (NULL == m_instance)</span><br><span class="line">			&#123;</span><br><span class="line">				m_instance = <span class="keyword">new</span> CSingleton;</span><br><span class="line">			&#125;</span><br><span class="line">			UnLock();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> m_instance;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> CSingleton* m_instance;</span><br><span class="line">	CSingleton()&#123;&#125;</span><br><span class="line">	CSingleton(<span class="keyword">const</span> CSingleton&amp;);</span><br><span class="line">	CSingleton &amp;<span class="keyword">operator</span> =(<span class="keyword">const</span> CSingleton&amp;);</span><br><span class="line">&#125;;</span><br><span class="line">CSingleton* CSingleton::m_instance = NULL;</span><br></pre></td></tr></table></figure>
<p><code>注意</code>，这里的普通构造函数、拷贝构造函数还有重载的操作符“=”都是私有的。而且拷贝构造函数和重载的“=”都不需要实现，这样的好处是即使是在友元类中也无法使用。</p>
<p>上面代码也并不完美，new出来的空间还没有被回收呢，我们都知道，在程序结束时，系统会自动析构所有的全局对象，系统也会自动析构所有类的静态成员变量，利用这个特征，我们在类里面加入一个类CGarbageCollector，在该类中定义一个静态成员变量，在其析构函数中释放单例模式中new出来的空间。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CSingleton</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">static</span> CSingleton* getInstance()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_pInstance == NULL)</span><br><span class="line">		&#123;</span><br><span class="line">			m_pInstance = <span class="keyword">new</span> CSingleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> m_pInstance;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	CSingleton()&#123;&#125;</span><br><span class="line">	CSingleton(<span class="keyword">const</span> CSingleton&amp;);</span><br><span class="line">	CSingleton &amp;<span class="keyword">operator</span> =(<span class="keyword">const</span> CSingleton&amp;);</span><br><span class="line">	<span class="keyword">static</span> CSingleton* m_pInstance;</span><br><span class="line">	<span class="keyword">class</span> CGarbageCollector</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		~CGarbageCollector()</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (CSingleton::m_pInstance)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">delete</span> CSingleton::m_pInstance;</span><br><span class="line">				CSingleton::m_pInstance = NULL;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">static</span> CGarbageCollector Garb;</span><br><span class="line">&#125;;</span><br><span class="line">CSingleton* CSingleton::m_pInstance = NULL;</span><br></pre></td></tr></table></figure>
<p>更加简洁的懒汉模式</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CSingleton</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">static</span> CSingleton&amp; getInstance()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">static</span> CSingleton instance;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	CSingleton()&#123;&#125;</span><br><span class="line">	CSingleton(<span class="keyword">const</span> CSingleton&amp;);</span><br><span class="line">	CSingleton&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> CSingleton&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里巧妙的运用了静态变量，而且还不需要考虑销毁的问题，不过要非常<code>注意</code>的是，这里在C++0x及其以后的标准中才是线程安全的。</p>
<h1 id="饿汉模式">饿汉模式</h1><p>为什么叫做饿汉模式呢？这是相对于懒汉模式来说的，因为类的静态成员变量在执行主函数之前就初始化了的，也就是说，这个单例对象在主函数执行前就创建了，想饿汉一样，看见东西先吃了再说，这里就是不管三七二十一，不管用不用得上，先创建一个对象再说。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CSingleton</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">static</span> CSingleton* getInstance()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> m_pInstance;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> CSingleton* m_pInstance;</span><br><span class="line">	CSingleton()&#123;&#125;</span><br><span class="line">	CSingleton(<span class="keyword">const</span> CSingleton &amp;);</span><br><span class="line">	CSingleton &amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> CSingleton &amp;);</span><br><span class="line">	<span class="keyword">class</span> CGarbageCollector</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		~CGarbageCollector()</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (CSingleton::m_pInstance)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">delete</span> CSingleton::m_pInstance;</span><br><span class="line">				CSingleton::m_pInstance = NULL;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">static</span> CGarbageCollector Garb;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CSingleton* CSingleton::m_pInstance = <span class="keyword">new</span> CSingleton;</span><br></pre></td></tr></table></figure>
<p>同样，采用了跟上面一样的方法来释放内存。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="单例模式定义">单例模式定义</h1><p>单例模式是设计模式的一种，即只能产生一个对象的类</p>
<h1 id="懒汉模式">懒汉模式</h1><p>所谓懒汉模式即第一次调用的时候才产生对象。这需要用锁才能够保证线程安全，但是如果处理大量数据时，性能不好。</]]>
    </summary>
    
      <category term="C++" scheme="http://woodsjiang.com/tags/C/"/>
    
      <category term="设计模式" scheme="http://woodsjiang.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="C/C++" scheme="http://woodsjiang.com/categories/C-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[找出词典中所有的变位词]]></title>
    <link href="http://woodsjiang.com/2015/04/09/%E6%89%BE%E5%87%BA%E8%AF%8D%E5%85%B8%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%8F%98%E4%BD%8D%E8%AF%8D/"/>
    <id>http://woodsjiang.com/2015/04/09/找出词典中所有的变位词/</id>
    <published>2015-04-09T11:34:04.000Z</published>
    <updated>2015-04-09T11:45:26.939Z</updated>
    <content type="html"><![CDATA[<h1 id="什么是变位词">什么是变位词</h1><p>两个词语所有的字母个数相同，但是字母顺序不一样的词语，成他们互为对方的变位词</p>
<h1 id="问题描述">问题描述</h1><p>给定一本词典，找出词典中的所有变位词</p>
<h1 id="解决思路">解决思路</h1><p>设置一个map来存储变位词，key是每个单词排列好的数序，value是一个存放string的set，用来存放所有的变位词。</p>
<pre><code>依次扫描每一个单词，并且排序
将排序好的单词作为<span class="variable">key</span>存放在<span class="built_in">map</span>中，而单词本身存放在value的<span class="built_in">set</span>容器中。
遍历输出<span class="built_in">map</span>，得到变位词表
</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">charcomp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> x, <span class="keyword">const</span> <span class="keyword">char</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span>  x &lt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入文件名字</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">anagramme</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; filename)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="function">ifstream <span class="title">ifs</span><span class="params">(filename)</span></span>;</span><br><span class="line">	<span class="function">ofstream <span class="title">ofs</span><span class="params">("output.txt")</span></span>;</span><br><span class="line">	<span class="built_in">string</span> word;</span><br><span class="line">	<span class="stl_container"><span class="built_in">map</span> &lt; <span class="built_in">string</span>, <span class="stl_container"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;</span>&gt;</span> wordmap;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读取词典</span></span><br><span class="line">	<span class="keyword">while</span> (ifs&gt;&gt;word)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">string</span> strTmp = word;</span><br><span class="line">		sort(word.begin(), word.end(), charcomp);</span><br><span class="line">		wordmap[word].insert(strTmp);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 遍历输出</span></span><br><span class="line">	<span class="stl_container"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="stl_container"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;</span>&gt;</span>::iterator mapIt = wordmap.begin();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (; mapIt != wordmap.end(); ++mapIt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="stl_container"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;</span>::iterator setIt = (mapIt-&gt;second).begin();</span><br><span class="line">		<span class="keyword">for</span> (; setIt != (mapIt-&gt;second).end(); ++setIt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; *setIt &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			ofs &lt;&lt; *setIt &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">		ofs &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ifs.close();</span><br><span class="line">	ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	anagramme(<span class="string">"dict.txt"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="什么是变位词">什么是变位词</h1><p>两个词语所有的字母个数相同，但是字母顺序不一样的词语，成他们互为对方的变位词</p>
<h1 id="问题描述">问题描述</h1><p>给定一本词典，找出词典中的所有变位词</p>
<h1 id="解决思路">解决思路]]>
    </summary>
    
      <category term="Algorithm" scheme="http://woodsjiang.com/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://woodsjiang.com/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[K-fold交叉验证]]></title>
    <link href="http://woodsjiang.com/2015/04/07/K-fold%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/"/>
    <id>http://woodsjiang.com/2015/04/07/K-fold交叉验证/</id>
    <published>2015-04-07T03:16:27.000Z</published>
    <updated>2015-04-07T08:18:14.716Z</updated>
    <content type="html"><![CDATA[<h1 id="适用情况">适用情况</h1><p>假设你将要训练一组数据，现在有m个模型，由$M_{1…m}$表示，需要选择具体使用哪个模型。那么这时就可以用交叉验证来选择模型了。</p>
<h1 id="具体过程">具体过程</h1><p>一、将数据集分为训练集Train和测试集Test。</p>
<p>二、再将训练集Train分成<code>K</code>份，做交叉验证</p>
<p>   (1) 现在从模型$M_{1}$开始，将数据分成<code>K</code>份（K=10比较常见），将其中的9份作为训练集，剩下的一份作为测试集，得到一个评分；然后依次选取一个不同的测试集，剩下的9份作为训练集，直到10份数据每一分都做过一次测试集为止，这时，我们得到10个评分，将这10个评分取平均值，得到模型M1的评分$f_1$。</p>
<p>   (2) 现在开始对模型$M_2$做评分，跟上面采用一样的验证方法，最终得到评分$f_2$</p>
<p>   (3) m个模型，一共得到了m个评分，最终取效果最好的那个模型$M_i$。</p>
<p>三、使用这个评分最好的模型$M_i$的参数，对所有的训练集Train再训练一次。最终数据就训练好了，然后在最开始划分的测试数据集Test上进行测试。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="适用情况">适用情况</h1><p>假设你将要训练一组数据，现在有m个模型，由$M_{1…m}$表示，需要选择具体使用哪个模型。那么这时就可以用交叉验证来选择模型了。</p>
<h1 id="具体过程">具体过程</h1><p>一、将数据集分为训练集Train和测]]>
    </summary>
    
      <category term="Machine Learning" scheme="http://woodsjiang.com/tags/Machine-Learning/"/>
    
      <category term="Machine Learning" scheme="http://woodsjiang.com/categories/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在matlab中添加livsvm及其使用介绍]]></title>
    <link href="http://woodsjiang.com/2015/04/07/%E5%9C%A8matlab%E4%B8%AD%E6%B7%BB%E5%8A%A0livsvm%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://woodsjiang.com/2015/04/07/在matlab中添加livsvm及其使用介绍/</id>
    <published>2015-04-07T01:12:57.000Z</published>
    <updated>2015-04-07T03:17:32.655Z</updated>
    <content type="html"><![CDATA[<h1 id="安装">安装</h1><p>livsvm3.20+matlab2014a</p>
<p>在网上看到很多方法都是比较老版本的libsvm了，现在新版本是不用编译的，在文件夹中已经编译好了，只需要我们将其添加到matlab对应的文件夹中即可。</p>
<p>首先，<a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" target="_blank" rel="external">下载livsvm</a>，我下载的是3.20版本的</p>
<p>然后将其解压到matlab的安装文件夹下面（当然，任意文件夹都可以，主要是你下一步设置路径时，能够找到就行了）。</p>
<p>最后，设置路径，如下图，注意，只需要将libsvm目录下的windows这个目录加入到其路径即可。<br><img src="http://7xifo1.com1.z0.glb.clouddn.com/matlab_libsvm.jpg" alt=""></p>
<h1 id="使用">使用</h1><p>读入livsvm自带的一个数据集<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[heart_scale_label, heart_scale_inst] =libsvmread('heart_scale');</span><br></pre></td></tr></table></figure></p>
<p>注意！这个地方的“heart_scale”文件存在于libsvm目录下，虽然我们刚才将这个文件夹添加到了路径中，但是还是不能直接读取，需要将执行路径切换到该目录下，才能够读取文件。</p>
<p>开始训练<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = svmtrain(heart_scale_label,heart_scale_inst);</span><br></pre></td></tr></table></figure></p>
<p>当然这里默认的是线性svm，如果需要其他的方法可以在函数的后面加上参数。</p>
<p>预测结果<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svmpredict(heart_scale_label,heart_scale_inst,model);</span><br><span class="line">Accuracy = <span class="number">86.6667</span>% (<span class="number">234</span>/<span class="number">270</span>) (classification)</span><br></pre></td></tr></table></figure></p>
<p>下面看看svm的高斯核函数在上面例子的威力，训练参数设置如下<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = svmtrain(heart_scale_label,heart_scale_inst, '-s 0 -t 2 -g 2');</span><br></pre></td></tr></table></figure></p>
<p>预测结果<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svmpredict(heart_scale_label, heart_scale_inst, model);</span><br><span class="line">Accuracy = <span class="number">99.2593</span>% (<span class="number">268</span>/<span class="number">270</span>) (classification)</span><br></pre></td></tr></table></figure></p>
<p>当然，这并不是最佳的参数，设置‘-g 3’时，还可以达到99.6296%</p>
<p>下面是一些参数的具体意思<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-s</span> svm_<span class="built_in">type</span> : <span class="built_in">set</span> <span class="built_in">type</span> of SVM (default <span class="number">0</span>)</span><br><span class="line">	<span class="number">0</span> -- C-SVC		(multi-class classification)</span><br><span class="line">	<span class="number">1</span> -- nu-SVC		(multi-class classification)</span><br><span class="line">	<span class="number">2</span> -- one-class SVM	</span><br><span class="line">	<span class="number">3</span> -- epsilon-SVR	(regression)</span><br><span class="line">	<span class="number">4</span> -- nu-SVR		(regression)</span><br><span class="line">-t kernel_<span class="built_in">type</span> : <span class="built_in">set</span> <span class="built_in">type</span> of kernel <span class="keyword">function</span> (default <span class="number">2</span>)</span><br><span class="line">	<span class="number">0</span> -- linear: u<span class="string">'*v</span><br><span class="line">	1 -- polynomial: (gamma*u'</span>*v + coef0)^degree</span><br><span class="line">	<span class="number">2</span> -- radial basis <span class="keyword">function</span>: exp(-gamma*|u-v|^<span class="number">2</span>)</span><br><span class="line">	<span class="number">3</span> -- sigmoid: tanh(gamma*u<span class="string">'*v + coef0)</span><br><span class="line">	4 -- precomputed kernel (kernel values in training_set_file)</span><br><span class="line">-d degree : set degree in kernel function (default 3)</span><br><span class="line">-g gamma : set gamma in kernel function (default 1/num_features)</span><br><span class="line">-r coef0 : set coef0 in kernel function (default 0)</span><br><span class="line">-c cost : set the parameter C of C-SVC, epsilon-SVR, and nu-SVR (default 1)</span><br><span class="line">-n nu : set the parameter nu of nu-SVC, one-class SVM, and nu-SVR (default 0.5)</span><br><span class="line">-p epsilon : set the epsilon in loss function of epsilon-SVR (default 0.1)</span><br><span class="line">-m cachesize : set cache memory size in MB (default 100)</span><br><span class="line">-e epsilon : set tolerance of termination criterion (default 0.001)</span><br><span class="line">-h shrinking : whether to use the shrinking heuristics, 0 or 1 (default 1)</span><br><span class="line">-b probability_estimates : whether to train a SVC or SVR model for probability estimates, 0 or 1 (default 0)</span><br><span class="line">-wi weight : set the parameter C of class i to weight*C, for C-SVC (default 1)</span><br><span class="line">-v n: n-fold cross validation mode</span><br><span class="line">-q : quiet mode (no outputs)</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装">安装</h1><p>livsvm3.20+matlab2014a</p>
<p>在网上看到很多方法都是比较老版本的libsvm了，现在新版本是不用编译的，在文件夹中已经编译好了，只需要我们将其添加到matlab对应的文件夹中即可。</p>
<p>首先，<a]]>
    </summary>
    
      <category term="Machine Learning" scheme="http://woodsjiang.com/tags/Machine-Learning/"/>
    
      <category term="Machine Learning" scheme="http://woodsjiang.com/categories/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[STL中at访问元素与[]访问元素的区别]]></title>
    <link href="http://woodsjiang.com/2015/04/05/STL%E4%B8%ADat%E8%AE%BF%E9%97%AE%E5%85%83%E7%B4%A0%E4%B8%8E-%E8%AE%BF%E9%97%AE%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://woodsjiang.com/2015/04/05/STL中at访问元素与-访问元素的区别/</id>
    <published>2015-04-05T14:38:08.000Z</published>
    <updated>2015-04-05T14:44:55.004Z</updated>
    <content type="html"><![CDATA[<h1 id="首先是我的gcc4-8-2版本中的at方法的实现">首先是我的gcc4.8.2版本中的at方法的实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">reference</span><br><span class="line"><span class="title">at</span><span class="params">(size_type __n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	_M_range_check(__n);</span><br><span class="line">	<span class="keyword">return</span> (*<span class="keyword">this</span>)[__n]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">const_reference</span><br><span class="line"><span class="title">at</span><span class="params">(size_type __n)</span> <span class="keyword">const</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	_M_range_check(__n);</span><br><span class="line">	<span class="keyword">return</span> (*<span class="keyword">this</span>)[__n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是其中<code>[]</code>的实现：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reference</span><br><span class="line"><span class="keyword">operator</span>[](size_type __n)</span><br><span class="line">&#123; <span class="keyword">return</span> *(<span class="keyword">this</span>-&gt;_M_impl._M_start + __n); &#125;</span><br><span class="line"></span><br><span class="line">const_reference</span><br><span class="line"><span class="keyword">operator</span>[](size_type __n) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> *(<span class="keyword">this</span>-&gt;_M_impl._M_start + __n); &#125;</span><br></pre></td></tr></table></figure></p>
<p>从上面我们可以发现，gcc中的<code>at</code>方法应该更加高效，因为用<code>[]</code>方法访问的时候，还做了一次加法，但是VS2013中，微软自家改版的Vector却不是这样。</p>
<h1 id="VS2013中，对Vector的实现">VS2013中，对Vector的实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">const_reference <span class="title">at</span><span class="params">(size_type _Pos)</span> <span class="keyword">const</span></span><br><span class="line">	</span>&#123;	<span class="comment">// subscript nonmutable sequence with checking</span></span><br><span class="line">	<span class="keyword">if</span> (size() &lt;= _Pos)</span><br><span class="line">		_Xran();</span><br><span class="line">	<span class="keyword">return</span> (*(<span class="keyword">this</span>-&gt;_Myfirst + _Pos));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">reference <span class="title">at</span><span class="params">(size_type _Pos)</span></span><br><span class="line">	</span>&#123;	<span class="comment">// subscript mutable sequence with checking</span></span><br><span class="line">	<span class="keyword">if</span> (size() &lt;= _Pos)</span><br><span class="line">		_Xran();</span><br><span class="line">	<span class="keyword">return</span> (*(<span class="keyword">this</span>-&gt;_Myfirst + _Pos));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">const_reference <span class="keyword">operator</span>[](size_type _Pos) <span class="keyword">const</span></span><br><span class="line">		&#123;	<span class="comment">// subscript nonmutable sequence</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> _ITERATOR_DEBUG_LEVEL == 2</span></span><br><span class="line">	<span class="keyword">if</span> (size() &lt;= _Pos)</span><br><span class="line">		&#123;	<span class="comment">// report error</span></span><br><span class="line">		_DEBUG_ERROR(<span class="string">"vector subscript out of range"</span>);</span><br><span class="line">		_SCL_SECURE_OUT_OF_RANGE;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">elif</span> _ITERATOR_DEBUG_LEVEL == 1</span></span><br><span class="line">		_SCL_SECURE_VALIDATE_RANGE(_Pos &lt; size());</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* _ITERATOR_DEBUG_LEVEL */</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> (*(<span class="keyword">this</span>-&gt;_Myfirst + _Pos));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	reference <span class="keyword">operator</span>[](size_type _Pos)</span><br><span class="line">		&#123;	<span class="comment">// subscript mutable sequence</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> _ITERATOR_DEBUG_LEVEL == 2</span></span><br><span class="line">		<span class="keyword">if</span> (size() &lt;= _Pos)</span><br><span class="line">			&#123;	<span class="comment">// report error</span></span><br><span class="line">			_DEBUG_ERROR(<span class="string">"vector subscript out of range"</span>);</span><br><span class="line">			_SCL_SECURE_OUT_OF_RANGE;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">elif</span> _ITERATOR_DEBUG_LEVEL == 1</span></span><br><span class="line">		_SCL_SECURE_VALIDATE_RANGE(_Pos &lt; size());</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* _ITERATOR_DEBUG_LEVEL */</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> (*(<span class="keyword">this</span>-&gt;_Myfirst + _Pos));</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p>从中我们可以发现，无论是<code>at</code>方法还是<code>[]</code>方法，都是采用头指针加上偏移量来实现的，为什么不都像第一个<code>at</code>方法那样，直接返回呢？</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="首先是我的gcc4-8-2版本中的at方法的实现">首先是我的gcc4.8.2版本中的at方法的实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="l]]>
    </summary>
    
      <category term="STL" scheme="http://woodsjiang.com/tags/STL/"/>
    
      <category term="STL" scheme="http://woodsjiang.com/categories/STL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[leetcode][bash]Word Frequency]]></title>
    <link href="http://woodsjiang.com/2015/04/04/leetcode-bash-Word-Frequency/"/>
    <id>http://woodsjiang.com/2015/04/04/leetcode-bash-Word-Frequency/</id>
    <published>2015-04-04T06:51:49.000Z</published>
    <updated>2015-04-04T11:10:55.434Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>来源：<a href="https://leetcode.com/problems/word-frequency/" target="_blank" rel="external">https://leetcode.com/problems/word-frequency/</a><br>Write a bash script to calculate the frequency of each word in a text file <code>words.txt</code>.</p>
<p>For simplicity sake, you may assume:</p>
<ul>
<li><code>words.txt</code> contains only lowercase characters and space <code>&#39; &#39;</code> characters.</li>
<li>Each word must consist of lowercase characters only.</li>
<li>Words are separated by one or more whitespace characters.</li>
</ul>
<p>For example, assume that <code>words.txt</code> has the following content:</p>
<pre><code><span class="keyword">the</span> <span class="property">day</span> <span class="keyword">is</span> sunny <span class="keyword">the</span> <span class="keyword">the</span>
<span class="keyword">the</span> sunny <span class="keyword">is</span> <span class="keyword">is</span>
</code></pre><p>Your script should output the following, sorted by descending frequency:</p>
<pre><code><span class="keyword">the</span> <span class="number">4</span>
<span class="keyword">is</span> <span class="number">3</span>
sunny <span class="number">2</span>
<span class="property">day</span> <span class="number">1</span>
</code></pre><p><strong>Note:</strong><br>Don’t worry about handling ties, it is guaranteed that each word’s frequency count is unique.</p>
<h1 id="Bash脚本">Bash脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat words.txt | tr <span class="operator">-s</span> <span class="string">' '</span> <span class="string">'\n'</span>|sort|uniq -c|sort -rn| awk <span class="string">'&#123;print $2":"$1&#125;'</span></span><br></pre></td></tr></table></figure>
<p>解释：<br>tr -s：使用指定字符串替换出现一次或者连续出现多次的字符串，这里就是将一个或者多个空格换成换行符<br>sort：将单词从小到大排序<br>uniq -c：uniq用来去掉连续出现的单词<br>sort -rn：sort默认是升序排列，-r则表示降序，-n则是按照数值大小排序<br>awk ‘{print$2” “$1}’：则是格式化输出，内容的每一行为<code>“ ”</code>中的内容</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>来源：<a href="https://leetcode.com/problems/word-frequency/" target="_blank" rel="external">https://leetcode.com/problem]]>
    </summary>
    
      <category term="leetcode" scheme="http://woodsjiang.com/tags/leetcode/"/>
    
      <category term="leetcode" scheme="http://woodsjiang.com/categories/leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://woodsjiang.com/2015/03/31/hello-world/"/>
    <id>http://woodsjiang.com/2015/03/31/hello-world/</id>
    <published>2015-03-31T13:19:30.124Z</published>
    <updated>2015-03-31T13:19:30.124Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>