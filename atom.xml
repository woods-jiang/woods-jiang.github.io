<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Woods Jiang]]></title>
  <subtitle><![CDATA[Talk less. Think more. Do more than more.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://woodsjiang.com/"/>
  <updated>2015-04-05T14:40:42.312Z</updated>
  <id>http://woodsjiang.com/</id>
  
  <author>
    <name><![CDATA[Woods Jiang]]></name>
    <email><![CDATA[woods.jiang.1@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[STL中at访问元素与[]访问元素的区别]]></title>
    <link href="http://woodsjiang.com/2015/04/05/STL%E4%B8%ADat%E8%AE%BF%E9%97%AE%E5%85%83%E7%B4%A0%E4%B8%8E-%E8%AE%BF%E9%97%AE%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://woodsjiang.com/2015/04/05/STL中at访问元素与-访问元素的区别/</id>
    <published>2015-04-05T14:38:08.000Z</published>
    <updated>2015-04-05T14:40:42.312Z</updated>
    <content type="html"><![CDATA[<h1 id="首先是我的gcc4-8-2版本中的at方法的实现">首先是我的gcc4.8.2版本中的<code>at</code>方法的实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">reference</span><br><span class="line"><span class="title">at</span><span class="params">(size_type __n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	_M_range_check(__n);</span><br><span class="line">	<span class="keyword">return</span> (*<span class="keyword">this</span>)[__n]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">const_reference</span><br><span class="line"><span class="title">at</span><span class="params">(size_type __n)</span> <span class="keyword">const</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	_M_range_check(__n);</span><br><span class="line">	<span class="keyword">return</span> (*<span class="keyword">this</span>)[__n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是其中<code>[]</code>的实现：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reference</span><br><span class="line"><span class="keyword">operator</span>[](size_type __n)</span><br><span class="line">&#123; <span class="keyword">return</span> *(<span class="keyword">this</span>-&gt;_M_impl._M_start + __n); &#125;</span><br><span class="line"></span><br><span class="line">const_reference</span><br><span class="line"><span class="keyword">operator</span>[](size_type __n) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> *(<span class="keyword">this</span>-&gt;_M_impl._M_start + __n); &#125;</span><br></pre></td></tr></table></figure></p>
<p>从上面我们可以发现，gcc中的<code>at</code>方法应该更加高效，因为用<code>[]</code>方法访问的时候，还做了一次加法，但是VS2013中，微软自家改版的Vector却不是这样。</p>
<h1 id="VS2013中，对Vector的实现">VS2013中，对Vector的实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">const_reference <span class="title">at</span><span class="params">(size_type _Pos)</span> <span class="keyword">const</span></span><br><span class="line">	</span>&#123;	<span class="comment">// subscript nonmutable sequence with checking</span></span><br><span class="line">	<span class="keyword">if</span> (size() &lt;= _Pos)</span><br><span class="line">		_Xran();</span><br><span class="line">	<span class="keyword">return</span> (*(<span class="keyword">this</span>-&gt;_Myfirst + _Pos));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">reference <span class="title">at</span><span class="params">(size_type _Pos)</span></span><br><span class="line">	</span>&#123;	<span class="comment">// subscript mutable sequence with checking</span></span><br><span class="line">	<span class="keyword">if</span> (size() &lt;= _Pos)</span><br><span class="line">		_Xran();</span><br><span class="line">	<span class="keyword">return</span> (*(<span class="keyword">this</span>-&gt;_Myfirst + _Pos));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">const_reference <span class="keyword">operator</span>[](size_type _Pos) <span class="keyword">const</span></span><br><span class="line">		&#123;	<span class="comment">// subscript nonmutable sequence</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> _ITERATOR_DEBUG_LEVEL == 2</span></span><br><span class="line">	<span class="keyword">if</span> (size() &lt;= _Pos)</span><br><span class="line">		&#123;	<span class="comment">// report error</span></span><br><span class="line">		_DEBUG_ERROR(<span class="string">"vector subscript out of range"</span>);</span><br><span class="line">		_SCL_SECURE_OUT_OF_RANGE;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">elif</span> _ITERATOR_DEBUG_LEVEL == 1</span></span><br><span class="line">		_SCL_SECURE_VALIDATE_RANGE(_Pos &lt; size());</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* _ITERATOR_DEBUG_LEVEL */</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> (*(<span class="keyword">this</span>-&gt;_Myfirst + _Pos));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	reference <span class="keyword">operator</span>[](size_type _Pos)</span><br><span class="line">		&#123;	<span class="comment">// subscript mutable sequence</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> _ITERATOR_DEBUG_LEVEL == 2</span></span><br><span class="line">		<span class="keyword">if</span> (size() &lt;= _Pos)</span><br><span class="line">			&#123;	<span class="comment">// report error</span></span><br><span class="line">			_DEBUG_ERROR(<span class="string">"vector subscript out of range"</span>);</span><br><span class="line">			_SCL_SECURE_OUT_OF_RANGE;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">elif</span> _ITERATOR_DEBUG_LEVEL == 1</span></span><br><span class="line">		_SCL_SECURE_VALIDATE_RANGE(_Pos &lt; size());</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* _ITERATOR_DEBUG_LEVEL */</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> (*(<span class="keyword">this</span>-&gt;_Myfirst + _Pos));</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p>从中我们可以发现，无论是<code>at</code>方法还是<code>[]</code>方法，都是采用头指针加上偏移量来实现的，为什么不都像第一个<code>at</code>方法那样，直接返回呢？</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="首先是我的gcc4-8-2版本中的at方法的实现">首先是我的gcc4.8.2版本中的<code>at</code>方法的实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><]]>
    </summary>
    
      <category term="STL" scheme="http://woodsjiang.com/tags/STL/"/>
    
      <category term="STL" scheme="http://woodsjiang.com/categories/STL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[leetcode][bash]Word Frequency]]></title>
    <link href="http://woodsjiang.com/2015/04/04/leetcode-bash-Word-Frequency/"/>
    <id>http://woodsjiang.com/2015/04/04/leetcode-bash-Word-Frequency/</id>
    <published>2015-04-04T06:51:49.000Z</published>
    <updated>2015-04-04T11:10:55.434Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>来源：<a href="https://leetcode.com/problems/word-frequency/" target="_blank" rel="external">https://leetcode.com/problems/word-frequency/</a><br>Write a bash script to calculate the frequency of each word in a text file <code>words.txt</code>.</p>
<p>For simplicity sake, you may assume:</p>
<ul>
<li><code>words.txt</code> contains only lowercase characters and space <code>&#39; &#39;</code> characters.</li>
<li>Each word must consist of lowercase characters only.</li>
<li>Words are separated by one or more whitespace characters.</li>
</ul>
<p>For example, assume that <code>words.txt</code> has the following content:</p>
<pre><code><span class="keyword">the</span> <span class="property">day</span> <span class="keyword">is</span> sunny <span class="keyword">the</span> <span class="keyword">the</span>
<span class="keyword">the</span> sunny <span class="keyword">is</span> <span class="keyword">is</span>
</code></pre><p>Your script should output the following, sorted by descending frequency:</p>
<pre><code><span class="keyword">the</span> <span class="number">4</span>
<span class="keyword">is</span> <span class="number">3</span>
sunny <span class="number">2</span>
<span class="property">day</span> <span class="number">1</span>
</code></pre><p><strong>Note:</strong><br>Don’t worry about handling ties, it is guaranteed that each word’s frequency count is unique.</p>
<h1 id="Bash脚本">Bash脚本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat words.txt | tr <span class="operator">-s</span> <span class="string">' '</span> <span class="string">'\n'</span>|sort|uniq -c|sort -rn| awk <span class="string">'&#123;print $2":"$1&#125;'</span></span><br></pre></td></tr></table></figure>
<p>解释：<br>tr -s：使用指定字符串替换出现一次或者连续出现多次的字符串，这里就是将一个或者多个空格换成换行符<br>sort：将单词从小到大排序<br>uniq -c：uniq用来去掉连续出现的单词<br>sort -rn：sort默认是升序排列，-r则表示降序，-n则是按照数值大小排序<br>awk ‘{print$2” “$1}’：则是格式化输出，内容的每一行为<code>“ ”</code>中的内容</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="题目">题目</h1><p>来源：<a href="https://leetcode.com/problems/word-frequency/" target="_blank" rel="external">https://leetcode.com/problem]]>
    </summary>
    
      <category term="leetcode" scheme="http://woodsjiang.com/tags/leetcode/"/>
    
      <category term="leetcode" scheme="http://woodsjiang.com/categories/leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[test]]></title>
    <link href="http://woodsjiang.com/2015/04/03/test/"/>
    <id>http://woodsjiang.com/2015/04/03/test/</id>
    <published>2015-04-03T03:10:56.000Z</published>
    <updated>2015-04-03T03:12:17.806Z</updated>
    <content type="html"><![CDATA[<h1 id="一级标题">一级标题</h1><h1 id="二级">二级</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello"</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一级标题">一级标题</h1><h1 id="二级">二级</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pr]]>
    </summary>
    
      <category term="test" scheme="http://woodsjiang.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://woodsjiang.com/2015/03/31/hello-world/"/>
    <id>http://woodsjiang.com/2015/03/31/hello-world/</id>
    <published>2015-03-31T13:19:30.124Z</published>
    <updated>2015-03-31T13:19:30.124Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>